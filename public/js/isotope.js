/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkmofidSanat"] = self["webpackChunkmofidSanat"] || []).push([["/js/isotope"],{

/***/ "./resources/assets/js/isotope.js":
/*!****************************************!*\
  !*** ./resources/assets/js/isotope.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__factory, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__factory, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_4__exports;var __WEBPACK_LOCAL_MODULE_5__array, __WEBPACK_LOCAL_MODULE_5__factory, __WEBPACK_LOCAL_MODULE_5__exports, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_6__exports;var __WEBPACK_LOCAL_MODULE_7__array, __WEBPACK_LOCAL_MODULE_7__factory, __WEBPACK_LOCAL_MODULE_7__exports, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_LOCAL_MODULE_8__array, __WEBPACK_LOCAL_MODULE_8__factory, __WEBPACK_LOCAL_MODULE_8__exports, __WEBPACK_LOCAL_MODULE_8__;var __WEBPACK_LOCAL_MODULE_9__array, __WEBPACK_LOCAL_MODULE_9__factory, __WEBPACK_LOCAL_MODULE_9__exports, __WEBPACK_LOCAL_MODULE_9__;var __WEBPACK_LOCAL_MODULE_10__array, __WEBPACK_LOCAL_MODULE_10__factory, __WEBPACK_LOCAL_MODULE_10__exports, __WEBPACK_LOCAL_MODULE_10__;var __WEBPACK_LOCAL_MODULE_11__array, __WEBPACK_LOCAL_MODULE_11__factory, __WEBPACK_LOCAL_MODULE_11__exports, __WEBPACK_LOCAL_MODULE_11__;var __WEBPACK_LOCAL_MODULE_12__array, __WEBPACK_LOCAL_MODULE_12__factory, __WEBPACK_LOCAL_MODULE_12__exports, __WEBPACK_LOCAL_MODULE_12__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Isotope PACKAGED v3.0.6\n *\n * Licensed GPLv3 for open source use\n * or Isotope Commercial License for commercial use\n *\n * https://isotope.metafizzy.co\n * Copyright 2010-2018 Metafizzy\n */\n\n/**\n * Bridget makes jQuery widgets\n * v2.0.1\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n(function (window, factory) {\n  // universal module definition\n\n  /*jshint strict: false */\n\n  /* globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {\n      return factory(window, jQuery);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function factory(window, jQuery) {\n  'use strict'; // ----- utils ----- //\n\n  var arraySlice = Array.prototype.slice; // helper function for logging errors\n  // $.error breaks jQuery chaining\n\n  var console = window.console;\n  var logError = typeof console == 'undefined' ? function () {} : function (message) {\n    console.error(message);\n  }; // ----- jQueryBridget ----- //\n\n  function jQueryBridget(namespace, PluginClass, $) {\n    $ = $ || jQuery || window.jQuery;\n\n    if (!$) {\n      return;\n    } // add option method -> $().plugin('option', {...})\n\n\n    if (!PluginClass.prototype.option) {\n      // option setter\n      PluginClass.prototype.option = function (opts) {\n        // bail out if not an object\n        if (!$.isPlainObject(opts)) {\n          return;\n        }\n\n        this.options = $.extend(true, this.options, opts);\n      };\n    } // make jQuery plugin\n\n\n    $.fn[namespace] = function (arg0\n    /*, arg1 */\n    ) {\n      if (typeof arg0 == 'string') {\n        // method call $().plugin( 'methodName', { options } )\n        // shift arguments by 1\n        var args = arraySlice.call(arguments, 1);\n        return methodCall(this, arg0, args);\n      } // just $().plugin({ options })\n\n\n      plainCall(this, arg0);\n      return this;\n    }; // $().plugin('methodName')\n\n\n    function methodCall($elems, methodName, args) {\n      var returnValue;\n      var pluginMethodStr = '$().' + namespace + '(\"' + methodName + '\")';\n      $elems.each(function (i, elem) {\n        // get instance\n        var instance = $.data(elem, namespace);\n\n        if (!instance) {\n          logError(namespace + ' not initialized. Cannot call methods, i.e. ' + pluginMethodStr);\n          return;\n        }\n\n        var method = instance[methodName];\n\n        if (!method || methodName.charAt(0) == '_') {\n          logError(pluginMethodStr + ' is not a valid method');\n          return;\n        } // apply method, get return value\n\n\n        var value = method.apply(instance, args); // set return value if value is returned, use only first value\n\n        returnValue = returnValue === undefined ? value : returnValue;\n      });\n      return returnValue !== undefined ? returnValue : $elems;\n    }\n\n    function plainCall($elems, options) {\n      $elems.each(function (i, elem) {\n        var instance = $.data(elem, namespace);\n\n        if (instance) {\n          // set options & init\n          instance.option(options);\n\n          instance._init();\n        } else {\n          // initialize new instance\n          instance = new PluginClass(elem, options);\n          $.data(elem, namespace, instance);\n        }\n      });\n    }\n\n    updateJQuery($);\n  } // ----- updateJQuery ----- //\n  // set $.bridget for v1 backwards compatibility\n\n\n  function updateJQuery($) {\n    if (!$ || $ && $.bridget) {\n      return;\n    }\n\n    $.bridget = jQueryBridget;\n  }\n\n  updateJQuery(jQuery || window.jQuery); // -----  ----- //\n\n  return jQueryBridget;\n});\n/**\n * EvEmitter v1.1.0\n * Lil' event emitter\n * MIT License\n */\n\n/* jshint unused: true, undef: true, strict: true */\n\n\n(function (global, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module, window */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_LOCAL_MODULE_1__factory = (factory), (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_1__module = { id: \"ev-emitter/ev-emitter\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports)) : __WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__factory));\n  } else {}\n})(typeof window != 'undefined' ? window : this, function () {\n  function EvEmitter() {}\n\n  var proto = EvEmitter.prototype;\n\n  proto.on = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    } // set events hash\n\n\n    var events = this._events = this._events || {}; // set listeners array\n\n    var listeners = events[eventName] = events[eventName] || []; // only add once\n\n    if (listeners.indexOf(listener) == -1) {\n      listeners.push(listener);\n    }\n\n    return this;\n  };\n\n  proto.once = function (eventName, listener) {\n    if (!eventName || !listener) {\n      return;\n    } // add event\n\n\n    this.on(eventName, listener); // set once flag\n    // set onceEvents hash\n\n    var onceEvents = this._onceEvents = this._onceEvents || {}; // set onceListeners object\n\n    var onceListeners = onceEvents[eventName] = onceEvents[eventName] || {}; // set flag\n\n    onceListeners[listener] = true;\n    return this;\n  };\n\n  proto.off = function (eventName, listener) {\n    var listeners = this._events && this._events[eventName];\n\n    if (!listeners || !listeners.length) {\n      return;\n    }\n\n    var index = listeners.indexOf(listener);\n\n    if (index != -1) {\n      listeners.splice(index, 1);\n    }\n\n    return this;\n  };\n\n  proto.emitEvent = function (eventName, args) {\n    var listeners = this._events && this._events[eventName];\n\n    if (!listeners || !listeners.length) {\n      return;\n    } // copy over to avoid interference if .off() in listener\n\n\n    listeners = listeners.slice(0);\n    args = args || []; // once stuff\n\n    var onceListeners = this._onceEvents && this._onceEvents[eventName];\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      var isOnce = onceListeners && onceListeners[listener];\n\n      if (isOnce) {\n        // remove listener\n        // remove before trigger to prevent recursion\n        this.off(eventName, listener); // unset once flag\n\n        delete onceListeners[listener];\n      } // trigger listener\n\n\n      listener.apply(this, args);\n    }\n\n    return this;\n  };\n\n  proto.allOff = function () {\n    delete this._events;\n    delete this._onceEvents;\n  };\n\n  return EvEmitter;\n});\n/*!\n * getSize v2.0.3\n * measure size of elements\n * MIT license\n */\n\n/* jshint browser: true, strict: true, undef: true, unused: true */\n\n/* globals console: false */\n\n\n(function (window, factory) {\n  /* jshint strict: false */\n\n  /* globals define, module */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_2__factory = (factory), (typeof __WEBPACK_LOCAL_MODULE_2__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_2__module = { id: \"get-size/get-size\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module)), (__WEBPACK_LOCAL_MODULE_2__module.loaded = true), __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports)) : __WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__factory));\n  } else {}\n})(window, function factory() {\n  'use strict'; // -------------------------- helpers -------------------------- //\n  // get a number from a string, not a percentage\n\n  function getStyleSize(value) {\n    var num = parseFloat(value); // not a percent like '100%', and a number\n\n    var isValid = value.indexOf('%') == -1 && !isNaN(num);\n    return isValid && num;\n  }\n\n  function noop() {}\n\n  var logError = typeof console == 'undefined' ? noop : function (message) {\n    console.error(message);\n  }; // -------------------------- measurements -------------------------- //\n\n  var measurements = ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth'];\n  var measurementsLength = measurements.length;\n\n  function getZeroSize() {\n    var size = {\n      width: 0,\n      height: 0,\n      innerWidth: 0,\n      innerHeight: 0,\n      outerWidth: 0,\n      outerHeight: 0\n    };\n\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      size[measurement] = 0;\n    }\n\n    return size;\n  } // -------------------------- getStyle -------------------------- //\n\n  /**\n   * getStyle, get style of element, check for Firefox bug\n   * https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n   */\n\n\n  function getStyle(elem) {\n    var style = getComputedStyle(elem);\n\n    if (!style) {\n      logError('Style returned ' + style + '. Are you running this code in a hidden iframe on Firefox? ' + 'See https://bit.ly/getsizebug1');\n    }\n\n    return style;\n  } // -------------------------- setup -------------------------- //\n\n\n  var isSetup = false;\n  var isBoxSizeOuter;\n  /**\n   * setup\n   * check isBoxSizerOuter\n   * do on first getSize() rather than on page load for Firefox bug\n   */\n\n  function setup() {\n    // setup once\n    if (isSetup) {\n      return;\n    }\n\n    isSetup = true; // -------------------------- box sizing -------------------------- //\n\n    /**\n     * Chrome & Safari measure the outer-width on style.width on border-box elems\n     * IE11 & Firefox<29 measures the inner-width\n     */\n\n    var div = document.createElement('div');\n    div.style.width = '200px';\n    div.style.padding = '1px 2px 3px 4px';\n    div.style.borderStyle = 'solid';\n    div.style.borderWidth = '1px 2px 3px 4px';\n    div.style.boxSizing = 'border-box';\n    var body = document.body || document.documentElement;\n    body.appendChild(div);\n    var style = getStyle(div); // round value for browser zoom. desandro/masonry#928\n\n    isBoxSizeOuter = Math.round(getStyleSize(style.width)) == 200;\n    getSize.isBoxSizeOuter = isBoxSizeOuter;\n    body.removeChild(div);\n  } // -------------------------- getSize -------------------------- //\n\n\n  function getSize(elem) {\n    setup(); // use querySeletor if elem is string\n\n    if (typeof elem == 'string') {\n      elem = document.querySelector(elem);\n    } // do not proceed on non-objects\n\n\n    if (!elem || _typeof(elem) != 'object' || !elem.nodeType) {\n      return;\n    }\n\n    var style = getStyle(elem); // if hidden, everything is 0\n\n    if (style.display == 'none') {\n      return getZeroSize();\n    }\n\n    var size = {};\n    size.width = elem.offsetWidth;\n    size.height = elem.offsetHeight;\n    var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box'; // get all measurements\n\n    for (var i = 0; i < measurementsLength; i++) {\n      var measurement = measurements[i];\n      var value = style[measurement];\n      var num = parseFloat(value); // any 'auto', 'medium' value will be 0\n\n      size[measurement] = !isNaN(num) ? num : 0;\n    }\n\n    var paddingWidth = size.paddingLeft + size.paddingRight;\n    var paddingHeight = size.paddingTop + size.paddingBottom;\n    var marginWidth = size.marginLeft + size.marginRight;\n    var marginHeight = size.marginTop + size.marginBottom;\n    var borderWidth = size.borderLeftWidth + size.borderRightWidth;\n    var borderHeight = size.borderTopWidth + size.borderBottomWidth;\n    var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter; // overwrite width and height if we can get it from style\n\n    var styleWidth = getStyleSize(style.width);\n\n    if (styleWidth !== false) {\n      size.width = styleWidth + ( // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth);\n    }\n\n    var styleHeight = getStyleSize(style.height);\n\n    if (styleHeight !== false) {\n      size.height = styleHeight + ( // add padding and border unless it's already including it\n      isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight);\n    }\n\n    size.innerWidth = size.width - (paddingWidth + borderWidth);\n    size.innerHeight = size.height - (paddingHeight + borderHeight);\n    size.outerWidth = size.width + marginWidth;\n    size.outerHeight = size.height + marginHeight;\n    return size;\n  }\n\n  return getSize;\n});\n/**\n * matchesSelector v2.0.2\n * matchesSelector( element, '.selector' )\n * MIT license\n */\n\n/*jshint browser: true, strict: true, undef: true, unused: true */\n\n\n(function (window, factory) {\n  /*global define: false, module: false */\n  'use strict'; // universal module definition\n\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_3__factory = (factory), (typeof __WEBPACK_LOCAL_MODULE_3__factory === 'function' ? ((__WEBPACK_LOCAL_MODULE_3__module = { id: \"desandro-matches-selector/matches-selector\", exports: {}, loaded: false }), (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module)), (__WEBPACK_LOCAL_MODULE_3__module.loaded = true), __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports)) : __WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__factory));\n  } else {}\n})(window, function factory() {\n  'use strict';\n\n  var matchesMethod = function () {\n    var ElemProto = window.Element.prototype; // check for the standard method name first\n\n    if (ElemProto.matches) {\n      return 'matches';\n    } // check un-prefixed\n\n\n    if (ElemProto.matchesSelector) {\n      return 'matchesSelector';\n    } // check vendor prefixes\n\n\n    var prefixes = ['webkit', 'moz', 'ms', 'o'];\n\n    for (var i = 0; i < prefixes.length; i++) {\n      var prefix = prefixes[i];\n      var method = prefix + 'MatchesSelector';\n\n      if (ElemProto[method]) {\n        return method;\n      }\n    }\n  }();\n\n  return function matchesSelector(elem, selector) {\n    return elem[matchesMethod](selector);\n  };\n});\n/**\n * Fizzy UI utils v2.0.7\n * MIT license\n */\n\n/*jshint browser: true, undef: true, unused: true, strict: true */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /*jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_3__], __WEBPACK_LOCAL_MODULE_4__ = (function (matchesSelector) {\n      return factory(window, matchesSelector);\n    }).apply(__WEBPACK_LOCAL_MODULE_4__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_4__ === undefined && (__WEBPACK_LOCAL_MODULE_4__ = __WEBPACK_LOCAL_MODULE_4__exports));\n  } else {}\n})(window, function factory(window, matchesSelector) {\n  var utils = {}; // ----- extend ----- //\n  // extends objects\n\n  utils.extend = function (a, b) {\n    for (var prop in b) {\n      a[prop] = b[prop];\n    }\n\n    return a;\n  }; // ----- modulo ----- //\n\n\n  utils.modulo = function (num, div) {\n    return (num % div + div) % div;\n  }; // ----- makeArray ----- //\n\n\n  var arraySlice = Array.prototype.slice; // turn element or nodeList into an array\n\n  utils.makeArray = function (obj) {\n    if (Array.isArray(obj)) {\n      // use object if already an array\n      return obj;\n    } // return empty array if undefined or null. #6\n\n\n    if (obj === null || obj === undefined) {\n      return [];\n    }\n\n    var isArrayLike = _typeof(obj) == 'object' && typeof obj.length == 'number';\n\n    if (isArrayLike) {\n      // convert nodeList to array\n      return arraySlice.call(obj);\n    } // array of single index\n\n\n    return [obj];\n  }; // ----- removeFrom ----- //\n\n\n  utils.removeFrom = function (ary, obj) {\n    var index = ary.indexOf(obj);\n\n    if (index != -1) {\n      ary.splice(index, 1);\n    }\n  }; // ----- getParent ----- //\n\n\n  utils.getParent = function (elem, selector) {\n    while (elem.parentNode && elem != document.body) {\n      elem = elem.parentNode;\n\n      if (matchesSelector(elem, selector)) {\n        return elem;\n      }\n    }\n  }; // ----- getQueryElement ----- //\n  // use element as selector string\n\n\n  utils.getQueryElement = function (elem) {\n    if (typeof elem == 'string') {\n      return document.querySelector(elem);\n    }\n\n    return elem;\n  }; // ----- handleEvent ----- //\n  // enable .ontype to trigger from .addEventListener( elem, 'type' )\n\n\n  utils.handleEvent = function (event) {\n    var method = 'on' + event.type;\n\n    if (this[method]) {\n      this[method](event);\n    }\n  }; // ----- filterFindElements ----- //\n\n\n  utils.filterFindElements = function (elems, selector) {\n    // make array of elems\n    elems = utils.makeArray(elems);\n    var ffElems = [];\n    elems.forEach(function (elem) {\n      // check that elem is an actual element\n      if (!(elem instanceof HTMLElement)) {\n        return;\n      } // add elem if no selector\n\n\n      if (!selector) {\n        ffElems.push(elem);\n        return;\n      } // filter & find items if we have a selector\n      // filter\n\n\n      if (matchesSelector(elem, selector)) {\n        ffElems.push(elem);\n      } // find children\n\n\n      var childElems = elem.querySelectorAll(selector); // concat childElems to filterFound array\n\n      for (var i = 0; i < childElems.length; i++) {\n        ffElems.push(childElems[i]);\n      }\n    });\n    return ffElems;\n  }; // ----- debounceMethod ----- //\n\n\n  utils.debounceMethod = function (_class, methodName, threshold) {\n    threshold = threshold || 100; // original method\n\n    var method = _class.prototype[methodName];\n    var timeoutName = methodName + 'Timeout';\n\n    _class.prototype[methodName] = function () {\n      var timeout = this[timeoutName];\n      clearTimeout(timeout);\n      var args = arguments;\n\n      var _this = this;\n\n      this[timeoutName] = setTimeout(function () {\n        method.apply(_this, args);\n        delete _this[timeoutName];\n      }, threshold);\n    };\n  }; // ----- docReady ----- //\n\n\n  utils.docReady = function (callback) {\n    var readyState = document.readyState;\n\n    if (readyState == 'complete' || readyState == 'interactive') {\n      // do async to allow for other scripts to run. metafizzy/flickity#441\n      setTimeout(callback);\n    } else {\n      document.addEventListener('DOMContentLoaded', callback);\n    }\n  }; // ----- htmlInit ----- //\n  // http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\n\n\n  utils.toDashed = function (str) {\n    return str.replace(/(.)([A-Z])/g, function (match, $1, $2) {\n      return $1 + '-' + $2;\n    }).toLowerCase();\n  };\n\n  var console = window.console;\n  /**\n   * allow user to initialize classes via [data-namespace] or .js-namespace class\n   * htmlInit( Widget, 'widgetName' )\n   * options are parsed from data-namespace-options\n   */\n\n  utils.htmlInit = function (WidgetClass, namespace) {\n    utils.docReady(function () {\n      var dashedNamespace = utils.toDashed(namespace);\n      var dataAttr = 'data-' + dashedNamespace;\n      var dataAttrElems = document.querySelectorAll('[' + dataAttr + ']');\n      var jsDashElems = document.querySelectorAll('.js-' + dashedNamespace);\n      var elems = utils.makeArray(dataAttrElems).concat(utils.makeArray(jsDashElems));\n      var dataOptionsAttr = dataAttr + '-options';\n      var jQuery = window.jQuery;\n      elems.forEach(function (elem) {\n        var attr = elem.getAttribute(dataAttr) || elem.getAttribute(dataOptionsAttr);\n        var options;\n\n        try {\n          options = attr && JSON.parse(attr);\n        } catch (error) {\n          // log error, do not initialize\n          if (console) {\n            console.error('Error parsing ' + dataAttr + ' on ' + elem.className + ': ' + error);\n          }\n\n          return;\n        } // initialize\n\n\n        var instance = new WidgetClass(elem, options); // make available via $().data('namespace')\n\n        if (jQuery) {\n          jQuery.data(elem, namespace, instance);\n        }\n      });\n    });\n  }; // -----  ----- //\n\n\n  return utils;\n});\n/**\n * Outlayer Item\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module, require */\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_LOCAL_MODULE_5__array = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_LOCAL_MODULE_5__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_5__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__factory.apply(__WEBPACK_LOCAL_MODULE_5__exports = {}, __WEBPACK_LOCAL_MODULE_5__array)), __WEBPACK_LOCAL_MODULE_5__ === undefined && (__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_5__ = __WEBPACK_LOCAL_MODULE_5__factory)\n\t\t));\n  } else {}\n})(window, function factory(EvEmitter, getSize) {\n  'use strict'; // ----- helpers ----- //\n\n  function isEmptyObj(obj) {\n    for (var prop in obj) {\n      return false;\n    }\n\n    prop = null;\n    return true;\n  } // -------------------------- CSS3 support -------------------------- //\n\n\n  var docElemStyle = document.documentElement.style;\n  var transitionProperty = typeof docElemStyle.transition == 'string' ? 'transition' : 'WebkitTransition';\n  var transformProperty = typeof docElemStyle.transform == 'string' ? 'transform' : 'WebkitTransform';\n  var transitionEndEvent = {\n    WebkitTransition: 'webkitTransitionEnd',\n    transition: 'transitionend'\n  }[transitionProperty]; // cache all vendor properties that could have vendor prefix\n\n  var vendorProperties = {\n    transform: transformProperty,\n    transition: transitionProperty,\n    transitionDuration: transitionProperty + 'Duration',\n    transitionProperty: transitionProperty + 'Property',\n    transitionDelay: transitionProperty + 'Delay'\n  }; // -------------------------- Item -------------------------- //\n\n  function Item(element, layout) {\n    if (!element) {\n      return;\n    }\n\n    this.element = element; // parent layout class, i.e. Masonry, Isotope, or Packery\n\n    this.layout = layout;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n\n    this._create();\n  } // inherit EvEmitter\n\n\n  var proto = Item.prototype = Object.create(EvEmitter.prototype);\n  proto.constructor = Item;\n\n  proto._create = function () {\n    // transition objects\n    this._transn = {\n      ingProperties: {},\n      clean: {},\n      onEnd: {}\n    };\n    this.css({\n      position: 'absolute'\n    });\n  }; // trigger specified handler for event type\n\n\n  proto.handleEvent = function (event) {\n    var method = 'on' + event.type;\n\n    if (this[method]) {\n      this[method](event);\n    }\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n  /**\n   * apply CSS styles to element\n   * @param {Object} style\n   */\n\n\n  proto.css = function (style) {\n    var elemStyle = this.element.style;\n\n    for (var prop in style) {\n      // use vendor property if available\n      var supportedProp = vendorProperties[prop] || prop;\n      elemStyle[supportedProp] = style[prop];\n    }\n  }; // measure position, and sets it\n\n\n  proto.getPosition = function () {\n    var style = getComputedStyle(this.element);\n\n    var isOriginLeft = this.layout._getOption('originLeft');\n\n    var isOriginTop = this.layout._getOption('originTop');\n\n    var xValue = style[isOriginLeft ? 'left' : 'right'];\n    var yValue = style[isOriginTop ? 'top' : 'bottom'];\n    var x = parseFloat(xValue);\n    var y = parseFloat(yValue); // convert percent to pixels\n\n    var layoutSize = this.layout.size;\n\n    if (xValue.indexOf('%') != -1) {\n      x = x / 100 * layoutSize.width;\n    }\n\n    if (yValue.indexOf('%') != -1) {\n      y = y / 100 * layoutSize.height;\n    } // clean up 'auto' or other non-integer values\n\n\n    x = isNaN(x) ? 0 : x;\n    y = isNaN(y) ? 0 : y; // remove padding from measurement\n\n    x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;\n    y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;\n    this.position.x = x;\n    this.position.y = y;\n  }; // set settled position, apply padding\n\n\n  proto.layoutPosition = function () {\n    var layoutSize = this.layout.size;\n    var style = {};\n\n    var isOriginLeft = this.layout._getOption('originLeft');\n\n    var isOriginTop = this.layout._getOption('originTop'); // x\n\n\n    var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';\n    var xProperty = isOriginLeft ? 'left' : 'right';\n    var xResetProperty = isOriginLeft ? 'right' : 'left';\n    var x = this.position.x + layoutSize[xPadding]; // set in percentage or pixels\n\n    style[xProperty] = this.getXValue(x); // reset other property\n\n    style[xResetProperty] = ''; // y\n\n    var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';\n    var yProperty = isOriginTop ? 'top' : 'bottom';\n    var yResetProperty = isOriginTop ? 'bottom' : 'top';\n    var y = this.position.y + layoutSize[yPadding]; // set in percentage or pixels\n\n    style[yProperty] = this.getYValue(y); // reset other property\n\n    style[yResetProperty] = '';\n    this.css(style);\n    this.emitEvent('layout', [this]);\n  };\n\n  proto.getXValue = function (x) {\n    var isHorizontal = this.layout._getOption('horizontal');\n\n    return this.layout.options.percentPosition && !isHorizontal ? x / this.layout.size.width * 100 + '%' : x + 'px';\n  };\n\n  proto.getYValue = function (y) {\n    var isHorizontal = this.layout._getOption('horizontal');\n\n    return this.layout.options.percentPosition && isHorizontal ? y / this.layout.size.height * 100 + '%' : y + 'px';\n  };\n\n  proto._transitionTo = function (x, y) {\n    this.getPosition(); // get current x & y from top/left\n\n    var curX = this.position.x;\n    var curY = this.position.y;\n    var didNotMove = x == this.position.x && y == this.position.y; // save end position\n\n    this.setPosition(x, y); // if did not move and not transitioning, just go to layout\n\n    if (didNotMove && !this.isTransitioning) {\n      this.layoutPosition();\n      return;\n    }\n\n    var transX = x - curX;\n    var transY = y - curY;\n    var transitionStyle = {};\n    transitionStyle.transform = this.getTranslate(transX, transY);\n    this.transition({\n      to: transitionStyle,\n      onTransitionEnd: {\n        transform: this.layoutPosition\n      },\n      isCleaning: true\n    });\n  };\n\n  proto.getTranslate = function (x, y) {\n    // flip cooridinates if origin on right or bottom\n    var isOriginLeft = this.layout._getOption('originLeft');\n\n    var isOriginTop = this.layout._getOption('originTop');\n\n    x = isOriginLeft ? x : -x;\n    y = isOriginTop ? y : -y;\n    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n  }; // non transition + transform support\n\n\n  proto.goTo = function (x, y) {\n    this.setPosition(x, y);\n    this.layoutPosition();\n  };\n\n  proto.moveTo = proto._transitionTo;\n\n  proto.setPosition = function (x, y) {\n    this.position.x = parseFloat(x);\n    this.position.y = parseFloat(y);\n  }; // ----- transition ----- //\n\n  /**\n   * @param {Object} style - CSS\n   * @param {Function} onTransitionEnd\n   */\n  // non transition, just trigger callback\n\n\n  proto._nonTransition = function (args) {\n    this.css(args.to);\n\n    if (args.isCleaning) {\n      this._removeStyles(args.to);\n    }\n\n    for (var prop in args.onTransitionEnd) {\n      args.onTransitionEnd[prop].call(this);\n    }\n  };\n  /**\n   * proper transition\n   * @param {Object} args - arguments\n   *   @param {Object} to - style to transition to\n   *   @param {Object} from - style to start transition from\n   *   @param {Boolean} isCleaning - removes transition styles after transition\n   *   @param {Function} onTransitionEnd - callback\n   */\n\n\n  proto.transition = function (args) {\n    // redirect to nonTransition if no transition duration\n    if (!parseFloat(this.layout.options.transitionDuration)) {\n      this._nonTransition(args);\n\n      return;\n    }\n\n    var _transition = this._transn; // keep track of onTransitionEnd callback by css property\n\n    for (var prop in args.onTransitionEnd) {\n      _transition.onEnd[prop] = args.onTransitionEnd[prop];\n    } // keep track of properties that are transitioning\n\n\n    for (prop in args.to) {\n      _transition.ingProperties[prop] = true; // keep track of properties to clean up when transition is done\n\n      if (args.isCleaning) {\n        _transition.clean[prop] = true;\n      }\n    } // set from styles\n\n\n    if (args.from) {\n      this.css(args.from); // force redraw. http://blog.alexmaccaw.com/css-transitions\n\n      var h = this.element.offsetHeight; // hack for JSHint to hush about unused var\n\n      h = null;\n    } // enable transition\n\n\n    this.enableTransition(args.to); // set styles that are transitioning\n\n    this.css(args.to);\n    this.isTransitioning = true;\n  }; // dash before all cap letters, including first for\n  // WebkitTransform => -webkit-transform\n\n\n  function toDashedAll(str) {\n    return str.replace(/([A-Z])/g, function ($1) {\n      return '-' + $1.toLowerCase();\n    });\n  }\n\n  var transitionProps = 'opacity,' + toDashedAll(transformProperty);\n\n  proto.enableTransition = function ()\n  /* style */\n  {\n    // HACK changing transitionProperty during a transition\n    // will cause transition to jump\n    if (this.isTransitioning) {\n      return;\n    } // make `transition: foo, bar, baz` from style object\n    // HACK un-comment this when enableTransition can work\n    // while a transition is happening\n    // var transitionValues = [];\n    // for ( var prop in style ) {\n    //   // dash-ify camelCased properties like WebkitTransition\n    //   prop = vendorProperties[ prop ] || prop;\n    //   transitionValues.push( toDashedAll( prop ) );\n    // }\n    // munge number to millisecond, to match stagger\n\n\n    var duration = this.layout.options.transitionDuration;\n    duration = typeof duration == 'number' ? duration + 'ms' : duration; // enable transition styles\n\n    this.css({\n      transitionProperty: transitionProps,\n      transitionDuration: duration,\n      transitionDelay: this.staggerDelay || 0\n    }); // listen for transition end event\n\n    this.element.addEventListener(transitionEndEvent, this, false);\n  }; // ----- events ----- //\n\n\n  proto.onwebkitTransitionEnd = function (event) {\n    this.ontransitionend(event);\n  };\n\n  proto.onotransitionend = function (event) {\n    this.ontransitionend(event);\n  }; // properties that I munge to make my life easier\n\n\n  var dashedVendorProperties = {\n    '-webkit-transform': 'transform'\n  };\n\n  proto.ontransitionend = function (event) {\n    // disregard bubbled events from children\n    if (event.target !== this.element) {\n      return;\n    }\n\n    var _transition = this._transn; // get property name of transitioned property, convert to prefix-free\n\n    var propertyName = dashedVendorProperties[event.propertyName] || event.propertyName; // remove property that has completed transitioning\n\n    delete _transition.ingProperties[propertyName]; // check if any properties are still transitioning\n\n    if (isEmptyObj(_transition.ingProperties)) {\n      // all properties have completed transitioning\n      this.disableTransition();\n    } // clean style\n\n\n    if (propertyName in _transition.clean) {\n      // clean up style\n      this.element.style[event.propertyName] = '';\n      delete _transition.clean[propertyName];\n    } // trigger onTransitionEnd callback\n\n\n    if (propertyName in _transition.onEnd) {\n      var onTransitionEnd = _transition.onEnd[propertyName];\n      onTransitionEnd.call(this);\n      delete _transition.onEnd[propertyName];\n    }\n\n    this.emitEvent('transitionEnd', [this]);\n  };\n\n  proto.disableTransition = function () {\n    this.removeTransitionStyles();\n    this.element.removeEventListener(transitionEndEvent, this, false);\n    this.isTransitioning = false;\n  };\n  /**\n   * removes style property from element\n   * @param {Object} style\n  **/\n\n\n  proto._removeStyles = function (style) {\n    // clean up transition styles\n    var cleanStyle = {};\n\n    for (var prop in style) {\n      cleanStyle[prop] = '';\n    }\n\n    this.css(cleanStyle);\n  };\n\n  var cleanTransitionStyle = {\n    transitionProperty: '',\n    transitionDuration: '',\n    transitionDelay: ''\n  };\n\n  proto.removeTransitionStyles = function () {\n    // remove transition\n    this.css(cleanTransitionStyle);\n  }; // ----- stagger ----- //\n\n\n  proto.stagger = function (delay) {\n    delay = isNaN(delay) ? 0 : delay;\n    this.staggerDelay = delay + 'ms';\n  }; // ----- show/hide/remove ----- //\n  // remove element from DOM\n\n\n  proto.removeElem = function () {\n    this.element.parentNode.removeChild(this.element); // remove display: none\n\n    this.css({\n      display: ''\n    });\n    this.emitEvent('remove', [this]);\n  };\n\n  proto.remove = function () {\n    // just remove element if no transition support or no transition\n    if (!transitionProperty || !parseFloat(this.layout.options.transitionDuration)) {\n      this.removeElem();\n      return;\n    } // start transition\n\n\n    this.once('transitionEnd', function () {\n      this.removeElem();\n    });\n    this.hide();\n  };\n\n  proto.reveal = function () {\n    delete this.isHidden; // remove display: none\n\n    this.css({\n      display: ''\n    });\n    var options = this.layout.options;\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');\n    onTransitionEnd[transitionEndProperty] = this.onRevealTransitionEnd;\n    this.transition({\n      from: options.hiddenStyle,\n      to: options.visibleStyle,\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onRevealTransitionEnd = function () {\n    // check if still visible\n    // during transition, item may have been hidden\n    if (!this.isHidden) {\n      this.emitEvent('reveal');\n    }\n  };\n  /**\n   * get style property use for hide/reveal transition end\n   * @param {String} styleProperty - hiddenStyle/visibleStyle\n   * @returns {String}\n   */\n\n\n  proto.getHideRevealTransitionEndProperty = function (styleProperty) {\n    var optionStyle = this.layout.options[styleProperty]; // use opacity\n\n    if (optionStyle.opacity) {\n      return 'opacity';\n    } // get first property\n\n\n    for (var prop in optionStyle) {\n      return prop;\n    }\n  };\n\n  proto.hide = function () {\n    // set flag\n    this.isHidden = true; // remove display: none\n\n    this.css({\n      display: ''\n    });\n    var options = this.layout.options;\n    var onTransitionEnd = {};\n    var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');\n    onTransitionEnd[transitionEndProperty] = this.onHideTransitionEnd;\n    this.transition({\n      from: options.visibleStyle,\n      to: options.hiddenStyle,\n      // keep hidden stuff hidden\n      isCleaning: true,\n      onTransitionEnd: onTransitionEnd\n    });\n  };\n\n  proto.onHideTransitionEnd = function () {\n    // check if still hidden\n    // during transition, item may have been un-hidden\n    if (this.isHidden) {\n      this.css({\n        display: 'none'\n      });\n      this.emitEvent('hide');\n    }\n  };\n\n  proto.destroy = function () {\n    this.css({\n      position: '',\n      left: '',\n      right: '',\n      top: '',\n      bottom: '',\n      transition: '',\n      transform: ''\n    });\n  };\n\n  return Item;\n});\n/*!\n * Outlayer v2.1.1\n * the brains and guts of a layout library\n * MIT license\n */\n\n\n(function (window, factory) {\n  'use strict'; // universal module definition\n\n  /* jshint strict: false */\n\n  /* globals define, module, require */\n\n  if (true) {\n    // AMD - RequireJS\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_6__ = (function (EvEmitter, getSize, utils, Item) {\n      return factory(window, EvEmitter, getSize, utils, Item);\n    }).apply(__WEBPACK_LOCAL_MODULE_6__exports = {}, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_LOCAL_MODULE_6__ === undefined && (__WEBPACK_LOCAL_MODULE_6__ = __WEBPACK_LOCAL_MODULE_6__exports));\n  } else {}\n})(window, function factory(window, EvEmitter, getSize, utils, Item) {\n  'use strict'; // ----- vars ----- //\n\n  var console = window.console;\n  var jQuery = window.jQuery;\n\n  var noop = function noop() {}; // -------------------------- Outlayer -------------------------- //\n  // globally unique identifiers\n\n\n  var GUID = 0; // internal store of all Outlayer intances\n\n  var instances = {};\n  /**\n   * @param {Element, String} element\n   * @param {Object} options\n   * @constructor\n   */\n\n  function Outlayer(element, options) {\n    var queryElement = utils.getQueryElement(element);\n\n    if (!queryElement) {\n      if (console) {\n        console.error('Bad element for ' + this.constructor.namespace + ': ' + (queryElement || element));\n      }\n\n      return;\n    }\n\n    this.element = queryElement; // add jQuery\n\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    } // options\n\n\n    this.options = utils.extend({}, this.constructor.defaults);\n    this.option(options); // add id for Outlayer.getFromElement\n\n    var id = ++GUID;\n    this.element.outlayerGUID = id; // expando\n\n    instances[id] = this; // associate via id\n    // kick it off\n\n    this._create();\n\n    var isInitLayout = this._getOption('initLayout');\n\n    if (isInitLayout) {\n      this.layout();\n    }\n  } // settings are for internal use only\n\n\n  Outlayer.namespace = 'outlayer';\n  Outlayer.Item = Item; // default options\n\n  Outlayer.defaults = {\n    containerStyle: {\n      position: 'relative'\n    },\n    initLayout: true,\n    originLeft: true,\n    originTop: true,\n    resize: true,\n    resizeContainer: true,\n    // item options\n    transitionDuration: '0.4s',\n    hiddenStyle: {\n      opacity: 0,\n      transform: 'scale(0.001)'\n    },\n    visibleStyle: {\n      opacity: 1,\n      transform: 'scale(1)'\n    }\n  };\n  var proto = Outlayer.prototype; // inherit EvEmitter\n\n  utils.extend(proto, EvEmitter.prototype);\n  /**\n   * set options\n   * @param {Object} opts\n   */\n\n  proto.option = function (opts) {\n    utils.extend(this.options, opts);\n  };\n  /**\n   * get backwards compatible option value, check old name\n   */\n\n\n  proto._getOption = function (option) {\n    var oldOption = this.constructor.compatOptions[option];\n    return oldOption && this.options[oldOption] !== undefined ? this.options[oldOption] : this.options[option];\n  };\n\n  Outlayer.compatOptions = {\n    // currentName: oldName\n    initLayout: 'isInitLayout',\n    horizontal: 'isHorizontal',\n    layoutInstant: 'isLayoutInstant',\n    originLeft: 'isOriginLeft',\n    originTop: 'isOriginTop',\n    resize: 'isResizeBound',\n    resizeContainer: 'isResizingContainer'\n  };\n\n  proto._create = function () {\n    // get items from children\n    this.reloadItems(); // elements that affect layout, but are not laid out\n\n    this.stamps = [];\n    this.stamp(this.options.stamp); // set container style\n\n    utils.extend(this.element.style, this.options.containerStyle); // bind resize method\n\n    var canBindResize = this._getOption('resize');\n\n    if (canBindResize) {\n      this.bindResize();\n    }\n  }; // goes through all children again and gets bricks in proper order\n\n\n  proto.reloadItems = function () {\n    // collection of item elements\n    this.items = this._itemize(this.element.children);\n  };\n  /**\n   * turn elements into Outlayer.Items to be used in layout\n   * @param {Array or NodeList or HTMLElement} elems\n   * @returns {Array} items - collection of new Outlayer Items\n   */\n\n\n  proto._itemize = function (elems) {\n    var itemElems = this._filterFindItemElements(elems);\n\n    var Item = this.constructor.Item; // create new Outlayer Items for collection\n\n    var items = [];\n\n    for (var i = 0; i < itemElems.length; i++) {\n      var elem = itemElems[i];\n      var item = new Item(elem, this);\n      items.push(item);\n    }\n\n    return items;\n  };\n  /**\n   * get item elements to be used in layout\n   * @param {Array or NodeList or HTMLElement} elems\n   * @returns {Array} items - item elements\n   */\n\n\n  proto._filterFindItemElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.itemSelector);\n  };\n  /**\n   * getter method for getting item elements\n   * @returns {Array} elems - collection of item elements\n   */\n\n\n  proto.getItemElements = function () {\n    return this.items.map(function (item) {\n      return item.element;\n    });\n  }; // ----- init & layout ----- //\n\n  /**\n   * lays out all items\n   */\n\n\n  proto.layout = function () {\n    this._resetLayout();\n\n    this._manageStamps(); // don't animate first layout\n\n\n    var layoutInstant = this._getOption('layoutInstant');\n\n    var isInstant = layoutInstant !== undefined ? layoutInstant : !this._isLayoutInited;\n    this.layoutItems(this.items, isInstant); // flag for initalized\n\n    this._isLayoutInited = true;\n  }; // _init is alias for layout\n\n\n  proto._init = proto.layout;\n  /**\n   * logic before any new layout\n   */\n\n  proto._resetLayout = function () {\n    this.getSize();\n  };\n\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n  };\n  /**\n   * get measurement from option, for columnWidth, rowHeight, gutter\n   * if option is String -> get element from selector string, & get size of element\n   * if option is Element -> get size of element\n   * else use option as a number\n   *\n   * @param {String} measurement\n   * @param {String} size - width or height\n   * @private\n   */\n\n\n  proto._getMeasurement = function (measurement, size) {\n    var option = this.options[measurement];\n    var elem;\n\n    if (!option) {\n      // default to 0\n      this[measurement] = 0;\n    } else {\n      // use option as an element\n      if (typeof option == 'string') {\n        elem = this.element.querySelector(option);\n      } else if (option instanceof HTMLElement) {\n        elem = option;\n      } // use size of element, if element\n\n\n      this[measurement] = elem ? getSize(elem)[size] : option;\n    }\n  };\n  /**\n   * layout a collection of item elements\n   * @api public\n   */\n\n\n  proto.layoutItems = function (items, isInstant) {\n    items = this._getItemsForLayout(items);\n\n    this._layoutItems(items, isInstant);\n\n    this._postLayout();\n  };\n  /**\n   * get the items to be laid out\n   * you may want to skip over some items\n   * @param {Array} items\n   * @returns {Array} items\n   */\n\n\n  proto._getItemsForLayout = function (items) {\n    return items.filter(function (item) {\n      return !item.isIgnored;\n    });\n  };\n  /**\n   * layout items\n   * @param {Array} items\n   * @param {Boolean} isInstant\n   */\n\n\n  proto._layoutItems = function (items, isInstant) {\n    this._emitCompleteOnItems('layout', items);\n\n    if (!items || !items.length) {\n      // no items, emit event with empty array\n      return;\n    }\n\n    var queue = [];\n    items.forEach(function (item) {\n      // get x/y object from method\n      var position = this._getItemLayoutPosition(item); // enqueue\n\n\n      position.item = item;\n      position.isInstant = isInstant || item.isLayoutInstant;\n      queue.push(position);\n    }, this);\n\n    this._processLayoutQueue(queue);\n  };\n  /**\n   * get item layout position\n   * @param {Outlayer.Item} item\n   * @returns {Object} x and y position\n   */\n\n\n  proto._getItemLayoutPosition = function ()\n  /* item */\n  {\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n  /**\n   * iterate over array and position each item\n   * Reason being - separating this logic prevents 'layout invalidation'\n   * thx @paul_irish\n   * @param {Array} queue\n   */\n\n\n  proto._processLayoutQueue = function (queue) {\n    this.updateStagger();\n    queue.forEach(function (obj, i) {\n      this._positionItem(obj.item, obj.x, obj.y, obj.isInstant, i);\n    }, this);\n  }; // set stagger from option in milliseconds number\n\n\n  proto.updateStagger = function () {\n    var stagger = this.options.stagger;\n\n    if (stagger === null || stagger === undefined) {\n      this.stagger = 0;\n      return;\n    }\n\n    this.stagger = getMilliseconds(stagger);\n    return this.stagger;\n  };\n  /**\n   * Sets position of item in DOM\n   * @param {Outlayer.Item} item\n   * @param {Number} x - horizontal position\n   * @param {Number} y - vertical position\n   * @param {Boolean} isInstant - disables transitions\n   */\n\n\n  proto._positionItem = function (item, x, y, isInstant, i) {\n    if (isInstant) {\n      // if not transition, just set CSS\n      item.goTo(x, y);\n    } else {\n      item.stagger(i * this.stagger);\n      item.moveTo(x, y);\n    }\n  };\n  /**\n   * Any logic you want to do after each layout,\n   * i.e. size the container\n   */\n\n\n  proto._postLayout = function () {\n    this.resizeContainer();\n  };\n\n  proto.resizeContainer = function () {\n    var isResizingContainer = this._getOption('resizeContainer');\n\n    if (!isResizingContainer) {\n      return;\n    }\n\n    var size = this._getContainerSize();\n\n    if (size) {\n      this._setContainerMeasure(size.width, true);\n\n      this._setContainerMeasure(size.height, false);\n    }\n  };\n  /**\n   * Sets width or height of container if returned\n   * @returns {Object} size\n   *   @param {Number} width\n   *   @param {Number} height\n   */\n\n\n  proto._getContainerSize = noop;\n  /**\n   * @param {Number} measure - size of width or height\n   * @param {Boolean} isWidth\n   */\n\n  proto._setContainerMeasure = function (measure, isWidth) {\n    if (measure === undefined) {\n      return;\n    }\n\n    var elemSize = this.size; // add padding and border width if border box\n\n    if (elemSize.isBorderBox) {\n      measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight + elemSize.borderLeftWidth + elemSize.borderRightWidth : elemSize.paddingBottom + elemSize.paddingTop + elemSize.borderTopWidth + elemSize.borderBottomWidth;\n    }\n\n    measure = Math.max(measure, 0);\n    this.element.style[isWidth ? 'width' : 'height'] = measure + 'px';\n  };\n  /**\n   * emit eventComplete on a collection of items events\n   * @param {String} eventName\n   * @param {Array} items - Outlayer.Items\n   */\n\n\n  proto._emitCompleteOnItems = function (eventName, items) {\n    var _this = this;\n\n    function onComplete() {\n      _this.dispatchEvent(eventName + 'Complete', null, [items]);\n    }\n\n    var count = items.length;\n\n    if (!items || !count) {\n      onComplete();\n      return;\n    }\n\n    var doneCount = 0;\n\n    function tick() {\n      doneCount++;\n\n      if (doneCount == count) {\n        onComplete();\n      }\n    } // bind callback\n\n\n    items.forEach(function (item) {\n      item.once(eventName, tick);\n    });\n  };\n  /**\n   * emits events via EvEmitter and jQuery events\n   * @param {String} type - name of event\n   * @param {Event} event - original event\n   * @param {Array} args - extra arguments\n   */\n\n\n  proto.dispatchEvent = function (type, event, args) {\n    // add original event to arguments\n    var emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n\n    if (jQuery) {\n      // set this.$element\n      this.$element = this.$element || jQuery(this.element);\n\n      if (event) {\n        // create jQuery event\n        var $event = jQuery.Event(event);\n        $event.type = type;\n        this.$element.trigger($event, args);\n      } else {\n        // just trigger with type if no event available\n        this.$element.trigger(type, args);\n      }\n    }\n  }; // -------------------------- ignore & stamps -------------------------- //\n\n  /**\n   * keep item in collection, but do not lay it out\n   * ignored items do not get skipped in layout\n   * @param {Element} elem\n   */\n\n\n  proto.ignore = function (elem) {\n    var item = this.getItem(elem);\n\n    if (item) {\n      item.isIgnored = true;\n    }\n  };\n  /**\n   * return item to layout collection\n   * @param {Element} elem\n   */\n\n\n  proto.unignore = function (elem) {\n    var item = this.getItem(elem);\n\n    if (item) {\n      delete item.isIgnored;\n    }\n  };\n  /**\n   * adds elements to stamps\n   * @param {NodeList, Array, Element, or String} elems\n   */\n\n\n  proto.stamp = function (elems) {\n    elems = this._find(elems);\n\n    if (!elems) {\n      return;\n    }\n\n    this.stamps = this.stamps.concat(elems); // ignore\n\n    elems.forEach(this.ignore, this);\n  };\n  /**\n   * removes elements to stamps\n   * @param {NodeList, Array, or Element} elems\n   */\n\n\n  proto.unstamp = function (elems) {\n    elems = this._find(elems);\n\n    if (!elems) {\n      return;\n    }\n\n    elems.forEach(function (elem) {\n      // filter out removed stamp elements\n      utils.removeFrom(this.stamps, elem);\n      this.unignore(elem);\n    }, this);\n  };\n  /**\n   * finds child elements\n   * @param {NodeList, Array, Element, or String} elems\n   * @returns {Array} elems\n   */\n\n\n  proto._find = function (elems) {\n    if (!elems) {\n      return;\n    } // if string, use argument as selector string\n\n\n    if (typeof elems == 'string') {\n      elems = this.element.querySelectorAll(elems);\n    }\n\n    elems = utils.makeArray(elems);\n    return elems;\n  };\n\n  proto._manageStamps = function () {\n    if (!this.stamps || !this.stamps.length) {\n      return;\n    }\n\n    this._getBoundingRect();\n\n    this.stamps.forEach(this._manageStamp, this);\n  }; // update boundingLeft / Top\n\n\n  proto._getBoundingRect = function () {\n    // get bounding rect for container element\n    var boundingRect = this.element.getBoundingClientRect();\n    var size = this.size;\n    this._boundingRect = {\n      left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,\n      top: boundingRect.top + size.paddingTop + size.borderTopWidth,\n      right: boundingRect.right - (size.paddingRight + size.borderRightWidth),\n      bottom: boundingRect.bottom - (size.paddingBottom + size.borderBottomWidth)\n    };\n  };\n  /**\n   * @param {Element} stamp\n  **/\n\n\n  proto._manageStamp = noop;\n  /**\n   * get x/y position of element relative to container element\n   * @param {Element} elem\n   * @returns {Object} offset - has left, top, right, bottom\n   */\n\n  proto._getElementOffset = function (elem) {\n    var boundingRect = elem.getBoundingClientRect();\n    var thisRect = this._boundingRect;\n    var size = getSize(elem);\n    var offset = {\n      left: boundingRect.left - thisRect.left - size.marginLeft,\n      top: boundingRect.top - thisRect.top - size.marginTop,\n      right: thisRect.right - boundingRect.right - size.marginRight,\n      bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom\n    };\n    return offset;\n  }; // -------------------------- resize -------------------------- //\n  // enable event handlers for listeners\n  // i.e. resize -> onresize\n\n\n  proto.handleEvent = utils.handleEvent;\n  /**\n   * Bind layout to window resizing\n   */\n\n  proto.bindResize = function () {\n    window.addEventListener('resize', this);\n    this.isResizeBound = true;\n  };\n  /**\n   * Unbind layout to window resizing\n   */\n\n\n  proto.unbindResize = function () {\n    window.removeEventListener('resize', this);\n    this.isResizeBound = false;\n  };\n\n  proto.onresize = function () {\n    this.resize();\n  };\n\n  utils.debounceMethod(Outlayer, 'onresize', 100);\n\n  proto.resize = function () {\n    // don't trigger if size did not change\n    // or if resize was unbound. See #9\n    if (!this.isResizeBound || !this.needsResizeLayout()) {\n      return;\n    }\n\n    this.layout();\n  };\n  /**\n   * check if layout is needed post layout\n   * @returns Boolean\n   */\n\n\n  proto.needsResizeLayout = function () {\n    var size = getSize(this.element); // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n\n    var hasSizes = this.size && size;\n    return hasSizes && size.innerWidth !== this.size.innerWidth;\n  }; // -------------------------- methods -------------------------- //\n\n  /**\n   * add items to Outlayer instance\n   * @param {Array or NodeList or Element} elems\n   * @returns {Array} items - Outlayer.Items\n  **/\n\n\n  proto.addItems = function (elems) {\n    var items = this._itemize(elems); // add items to collection\n\n\n    if (items.length) {\n      this.items = this.items.concat(items);\n    }\n\n    return items;\n  };\n  /**\n   * Layout newly-appended item elements\n   * @param {Array or NodeList or Element} elems\n   */\n\n\n  proto.appended = function (elems) {\n    var items = this.addItems(elems);\n\n    if (!items.length) {\n      return;\n    } // layout and reveal just the new items\n\n\n    this.layoutItems(items, true);\n    this.reveal(items);\n  };\n  /**\n   * Layout prepended elements\n   * @param {Array or NodeList or Element} elems\n   */\n\n\n  proto.prepended = function (elems) {\n    var items = this._itemize(elems);\n\n    if (!items.length) {\n      return;\n    } // add items to beginning of collection\n\n\n    var previousItems = this.items.slice(0);\n    this.items = items.concat(previousItems); // start new layout\n\n    this._resetLayout();\n\n    this._manageStamps(); // layout new stuff without transition\n\n\n    this.layoutItems(items, true);\n    this.reveal(items); // layout previous items\n\n    this.layoutItems(previousItems);\n  };\n  /**\n   * reveal a collection of items\n   * @param {Array of Outlayer.Items} items\n   */\n\n\n  proto.reveal = function (items) {\n    this._emitCompleteOnItems('reveal', items);\n\n    if (!items || !items.length) {\n      return;\n    }\n\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.reveal();\n    });\n  };\n  /**\n   * hide a collection of items\n   * @param {Array of Outlayer.Items} items\n   */\n\n\n  proto.hide = function (items) {\n    this._emitCompleteOnItems('hide', items);\n\n    if (!items || !items.length) {\n      return;\n    }\n\n    var stagger = this.updateStagger();\n    items.forEach(function (item, i) {\n      item.stagger(i * stagger);\n      item.hide();\n    });\n  };\n  /**\n   * reveal item elements\n   * @param {Array}, {Element}, {NodeList} items\n   */\n\n\n  proto.revealItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.reveal(items);\n  };\n  /**\n   * hide item elements\n   * @param {Array}, {Element}, {NodeList} items\n   */\n\n\n  proto.hideItemElements = function (elems) {\n    var items = this.getItems(elems);\n    this.hide(items);\n  };\n  /**\n   * get Outlayer.Item, given an Element\n   * @param {Element} elem\n   * @param {Function} callback\n   * @returns {Outlayer.Item} item\n   */\n\n\n  proto.getItem = function (elem) {\n    // loop through items to get the one that matches\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this.items[i];\n\n      if (item.element == elem) {\n        // return item\n        return item;\n      }\n    }\n  };\n  /**\n   * get collection of Outlayer.Items, given Elements\n   * @param {Array} elems\n   * @returns {Array} items - Outlayer.Items\n   */\n\n\n  proto.getItems = function (elems) {\n    elems = utils.makeArray(elems);\n    var items = [];\n    elems.forEach(function (elem) {\n      var item = this.getItem(elem);\n\n      if (item) {\n        items.push(item);\n      }\n    }, this);\n    return items;\n  };\n  /**\n   * remove element(s) from instance and DOM\n   * @param {Array or NodeList or Element} elems\n   */\n\n\n  proto.remove = function (elems) {\n    var removeItems = this.getItems(elems);\n\n    this._emitCompleteOnItems('remove', removeItems); // bail if no items to remove\n\n\n    if (!removeItems || !removeItems.length) {\n      return;\n    }\n\n    removeItems.forEach(function (item) {\n      item.remove(); // remove item from collection\n\n      utils.removeFrom(this.items, item);\n    }, this);\n  }; // ----- destroy ----- //\n  // remove and disable Outlayer instance\n\n\n  proto.destroy = function () {\n    // clean up dynamic styles\n    var style = this.element.style;\n    style.height = '';\n    style.position = '';\n    style.width = ''; // destroy items\n\n    this.items.forEach(function (item) {\n      item.destroy();\n    });\n    this.unbindResize();\n    var id = this.element.outlayerGUID;\n    delete instances[id]; // remove reference to instance by id\n\n    delete this.element.outlayerGUID; // remove data for jQuery\n\n    if (jQuery) {\n      jQuery.removeData(this.element, this.constructor.namespace);\n    }\n  }; // -------------------------- data -------------------------- //\n\n  /**\n   * get Outlayer instance from element\n   * @param {Element} elem\n   * @returns {Outlayer}\n   */\n\n\n  Outlayer.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    var id = elem && elem.outlayerGUID;\n    return id && instances[id];\n  }; // -------------------------- create Outlayer class -------------------------- //\n\n  /**\n   * create a layout class\n   * @param {String} namespace\n   */\n\n\n  Outlayer.create = function (namespace, options) {\n    // sub-class Outlayer\n    var Layout = subclass(Outlayer); // apply new options and compatOptions\n\n    Layout.defaults = utils.extend({}, Outlayer.defaults);\n    utils.extend(Layout.defaults, options);\n    Layout.compatOptions = utils.extend({}, Outlayer.compatOptions);\n    Layout.namespace = namespace;\n    Layout.data = Outlayer.data; // sub-class Item\n\n    Layout.Item = subclass(Item); // -------------------------- declarative -------------------------- //\n\n    utils.htmlInit(Layout, namespace); // -------------------------- jQuery bridge -------------------------- //\n    // make into jQuery plugin\n\n    if (jQuery && jQuery.bridget) {\n      jQuery.bridget(namespace, Layout);\n    }\n\n    return Layout;\n  };\n\n  function subclass(Parent) {\n    function SubClass() {\n      Parent.apply(this, arguments);\n    }\n\n    SubClass.prototype = Object.create(Parent.prototype);\n    SubClass.prototype.constructor = SubClass;\n    return SubClass;\n  } // ----- helpers ----- //\n  // how many milliseconds are in each unit\n\n\n  var msUnits = {\n    ms: 1,\n    s: 1000\n  }; // munge time-like parameter into millisecond number\n  // '0.4s' -> 40\n\n  function getMilliseconds(time) {\n    if (typeof time == 'number') {\n      return time;\n    }\n\n    var matches = time.match(/(^\\d*\\.?\\d*)(\\w*)/);\n    var num = matches && matches[1];\n    var unit = matches && matches[2];\n\n    if (!num.length) {\n      return 0;\n    }\n\n    num = parseFloat(num);\n    var mult = msUnits[unit] || 1;\n    return num * mult;\n  } // ----- fin ----- //\n  // back in global\n\n\n  Outlayer.Item = Item;\n  return Outlayer;\n});\n/**\n * Isotope Item\n**/\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_7__array = [__WEBPACK_LOCAL_MODULE_6__], __WEBPACK_LOCAL_MODULE_7__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_7__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__factory.apply(__WEBPACK_LOCAL_MODULE_7__exports = {}, __WEBPACK_LOCAL_MODULE_7__array)), __WEBPACK_LOCAL_MODULE_7__ === undefined && (__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_7__ = __WEBPACK_LOCAL_MODULE_7__factory)\n\t\t));\n  } else {}\n})(window, function factory(Outlayer) {\n  'use strict'; // -------------------------- Item -------------------------- //\n  // sub-class Outlayer Item\n\n  function Item() {\n    Outlayer.Item.apply(this, arguments);\n  }\n\n  var proto = Item.prototype = Object.create(Outlayer.Item.prototype);\n  var _create = proto._create;\n\n  proto._create = function () {\n    // assign id, used for original-order sorting\n    this.id = this.layout.itemGUID++;\n\n    _create.call(this);\n\n    this.sortData = {};\n  };\n\n  proto.updateSortData = function () {\n    if (this.isIgnored) {\n      return;\n    } // default sorters\n\n\n    this.sortData.id = this.id; // for backward compatibility\n\n    this.sortData['original-order'] = this.id;\n    this.sortData.random = Math.random(); // go thru getSortData obj and apply the sorters\n\n    var getSortData = this.layout.options.getSortData;\n    var sorters = this.layout._sorters;\n\n    for (var key in getSortData) {\n      var sorter = sorters[key];\n      this.sortData[key] = sorter(this.element, this);\n    }\n  };\n\n  var _destroy = proto.destroy;\n\n  proto.destroy = function () {\n    // call super\n    _destroy.apply(this, arguments); // reset display, #741\n\n\n    this.css({\n      display: ''\n    });\n  };\n\n  return Item;\n});\n/**\n * Isotope LayoutMode\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_8__array = [__WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_6__], __WEBPACK_LOCAL_MODULE_8__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_8__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__factory.apply(__WEBPACK_LOCAL_MODULE_8__exports = {}, __WEBPACK_LOCAL_MODULE_8__array)), __WEBPACK_LOCAL_MODULE_8__ === undefined && (__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_8__ = __WEBPACK_LOCAL_MODULE_8__factory)\n\t\t));\n  } else {}\n})(window, function factory(getSize, Outlayer) {\n  'use strict'; // layout mode class\n\n  function LayoutMode(isotope) {\n    this.isotope = isotope; // link properties\n\n    if (isotope) {\n      this.options = isotope.options[this.namespace];\n      this.element = isotope.element;\n      this.items = isotope.filteredItems;\n      this.size = isotope.size;\n    }\n  }\n\n  var proto = LayoutMode.prototype;\n  /**\n   * some methods should just defer to default Outlayer method\n   * and reference the Isotope instance as `this`\n  **/\n\n  var facadeMethods = ['_resetLayout', '_getItemLayoutPosition', '_manageStamp', '_getContainerSize', '_getElementOffset', 'needsResizeLayout', '_getOption'];\n  facadeMethods.forEach(function (methodName) {\n    proto[methodName] = function () {\n      return Outlayer.prototype[methodName].apply(this.isotope, arguments);\n    };\n  }); // -----  ----- //\n  // for horizontal layout modes, check vertical size\n\n  proto.needsVerticalResizeLayout = function () {\n    // don't trigger if size did not change\n    var size = getSize(this.isotope.element); // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n\n    var hasSizes = this.isotope.size && size;\n    return hasSizes && size.innerHeight != this.isotope.size.innerHeight;\n  }; // ----- measurements ----- //\n\n\n  proto._getMeasurement = function () {\n    this.isotope._getMeasurement.apply(this, arguments);\n  };\n\n  proto.getColumnWidth = function () {\n    this.getSegmentSize('column', 'Width');\n  };\n\n  proto.getRowHeight = function () {\n    this.getSegmentSize('row', 'Height');\n  };\n  /**\n   * get columnWidth or rowHeight\n   * segment: 'column' or 'row'\n   * size 'Width' or 'Height'\n  **/\n\n\n  proto.getSegmentSize = function (segment, size) {\n    var segmentName = segment + size;\n    var outerSize = 'outer' + size; // columnWidth / outerWidth // rowHeight / outerHeight\n\n    this._getMeasurement(segmentName, outerSize); // got rowHeight or columnWidth, we can chill\n\n\n    if (this[segmentName]) {\n      return;\n    } // fall back to item of first element\n\n\n    var firstItemSize = this.getFirstItemSize();\n    this[segmentName] = firstItemSize && firstItemSize[outerSize] || // or size of container\n    this.isotope.size['inner' + size];\n  };\n\n  proto.getFirstItemSize = function () {\n    var firstItem = this.isotope.filteredItems[0];\n    return firstItem && firstItem.element && getSize(firstItem.element);\n  }; // ----- methods that should reference isotope ----- //\n\n\n  proto.layout = function () {\n    this.isotope.layout.apply(this.isotope, arguments);\n  };\n\n  proto.getSize = function () {\n    this.isotope.getSize();\n    this.size = this.isotope.size;\n  }; // -------------------------- create -------------------------- //\n\n\n  LayoutMode.modes = {};\n\n  LayoutMode.create = function (namespace, options) {\n    function Mode() {\n      LayoutMode.apply(this, arguments);\n    }\n\n    Mode.prototype = Object.create(proto);\n    Mode.prototype.constructor = Mode; // default options\n\n    if (options) {\n      Mode.options = options;\n    }\n\n    Mode.prototype.namespace = namespace; // register in Isotope\n\n    LayoutMode.modes[namespace] = Mode;\n    return Mode;\n  };\n\n  return LayoutMode;\n});\n/*!\n * Masonry v4.2.1\n * Cascading grid layout library\n * https://masonry.desandro.com\n * MIT License\n * by David DeSandro\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_9__array = [__WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_2__], __WEBPACK_LOCAL_MODULE_9__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_9__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__factory.apply(__WEBPACK_LOCAL_MODULE_9__exports = {}, __WEBPACK_LOCAL_MODULE_9__array)), __WEBPACK_LOCAL_MODULE_9__ === undefined && (__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_9__ = __WEBPACK_LOCAL_MODULE_9__factory)\n\t\t));\n  } else {}\n})(window, function factory(Outlayer, getSize) {\n  // -------------------------- masonryDefinition -------------------------- //\n  // create an Outlayer layout class\n  var Masonry = Outlayer.create('masonry'); // isFitWidth -> fitWidth\n\n  Masonry.compatOptions.fitWidth = 'isFitWidth';\n  var proto = Masonry.prototype;\n\n  proto._resetLayout = function () {\n    this.getSize();\n\n    this._getMeasurement('columnWidth', 'outerWidth');\n\n    this._getMeasurement('gutter', 'outerWidth');\n\n    this.measureColumns(); // reset column Y\n\n    this.colYs = [];\n\n    for (var i = 0; i < this.cols; i++) {\n      this.colYs.push(0);\n    }\n\n    this.maxY = 0;\n    this.horizontalColIndex = 0;\n  };\n\n  proto.measureColumns = function () {\n    this.getContainerWidth(); // if columnWidth is 0, default to outerWidth of first item\n\n    if (!this.columnWidth) {\n      var firstItem = this.items[0];\n      var firstItemElem = firstItem && firstItem.element; // columnWidth fall back to item of first element\n\n      this.columnWidth = firstItemElem && getSize(firstItemElem).outerWidth || // if first elem has no width, default to size of container\n      this.containerWidth;\n    }\n\n    var columnWidth = this.columnWidth += this.gutter; // calculate columns\n\n    var containerWidth = this.containerWidth + this.gutter;\n    var cols = containerWidth / columnWidth; // fix rounding errors, typically with gutters\n\n    var excess = columnWidth - containerWidth % columnWidth; // if overshoot is less than a pixel, round up, otherwise floor it\n\n    var mathMethod = excess && excess < 1 ? 'round' : 'floor';\n    cols = Math[mathMethod](cols);\n    this.cols = Math.max(cols, 1);\n  };\n\n  proto.getContainerWidth = function () {\n    // container is parent if fit width\n    var isFitWidth = this._getOption('fitWidth');\n\n    var container = isFitWidth ? this.element.parentNode : this.element; // check that this.size and size are there\n    // IE8 triggers resize on body size change, so they might not be\n\n    var size = getSize(container);\n    this.containerWidth = size && size.innerWidth;\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize(); // how many columns does this brick span\n\n    var remainder = item.size.outerWidth % this.columnWidth;\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil'; // round if off by 1 pixel, otherwise use ceil\n\n    var colSpan = Math[mathMethod](item.size.outerWidth / this.columnWidth);\n    colSpan = Math.min(colSpan, this.cols); // use horizontal or top column position\n\n    var colPosMethod = this.options.horizontalOrder ? '_getHorizontalColPosition' : '_getTopColPosition';\n    var colPosition = this[colPosMethod](colSpan, item); // position the brick\n\n    var position = {\n      x: this.columnWidth * colPosition.col,\n      y: colPosition.y\n    }; // apply setHeight to necessary columns\n\n    var setHeight = colPosition.y + item.size.outerHeight;\n    var setMax = colSpan + colPosition.col;\n\n    for (var i = colPosition.col; i < setMax; i++) {\n      this.colYs[i] = setHeight;\n    }\n\n    return position;\n  };\n\n  proto._getTopColPosition = function (colSpan) {\n    var colGroup = this._getTopColGroup(colSpan); // get the minimum Y value from the columns\n\n\n    var minimumY = Math.min.apply(Math, colGroup);\n    return {\n      col: colGroup.indexOf(minimumY),\n      y: minimumY\n    };\n  };\n  /**\n   * @param {Number} colSpan - number of columns the element spans\n   * @returns {Array} colGroup\n   */\n\n\n  proto._getTopColGroup = function (colSpan) {\n    if (colSpan < 2) {\n      // if brick spans only one column, use all the column Ys\n      return this.colYs;\n    }\n\n    var colGroup = []; // how many different places could this brick fit horizontally\n\n    var groupCount = this.cols + 1 - colSpan; // for each group potential horizontal position\n\n    for (var i = 0; i < groupCount; i++) {\n      colGroup[i] = this._getColGroupY(i, colSpan);\n    }\n\n    return colGroup;\n  };\n\n  proto._getColGroupY = function (col, colSpan) {\n    if (colSpan < 2) {\n      return this.colYs[col];\n    } // make an array of colY values for that one group\n\n\n    var groupColYs = this.colYs.slice(col, col + colSpan); // and get the max value of the array\n\n    return Math.max.apply(Math, groupColYs);\n  }; // get column position based on horizontal index. #873\n\n\n  proto._getHorizontalColPosition = function (colSpan, item) {\n    var col = this.horizontalColIndex % this.cols;\n    var isOver = colSpan > 1 && col + colSpan > this.cols; // shift to next row if item can't fit on current row\n\n    col = isOver ? 0 : col; // don't let zero-size items take up space\n\n    var hasSize = item.size.outerWidth && item.size.outerHeight;\n    this.horizontalColIndex = hasSize ? col + colSpan : this.horizontalColIndex;\n    return {\n      col: col,\n      y: this._getColGroupY(col, colSpan)\n    };\n  };\n\n  proto._manageStamp = function (stamp) {\n    var stampSize = getSize(stamp);\n\n    var offset = this._getElementOffset(stamp); // get the columns that this stamp affects\n\n\n    var isOriginLeft = this._getOption('originLeft');\n\n    var firstX = isOriginLeft ? offset.left : offset.right;\n    var lastX = firstX + stampSize.outerWidth;\n    var firstCol = Math.floor(firstX / this.columnWidth);\n    firstCol = Math.max(0, firstCol);\n    var lastCol = Math.floor(lastX / this.columnWidth); // lastCol should not go over if multiple of columnWidth #425\n\n    lastCol -= lastX % this.columnWidth ? 0 : 1;\n    lastCol = Math.min(this.cols - 1, lastCol); // set colYs to bottom of the stamp\n\n    var isOriginTop = this._getOption('originTop');\n\n    var stampMaxY = (isOriginTop ? offset.top : offset.bottom) + stampSize.outerHeight;\n\n    for (var i = firstCol; i <= lastCol; i++) {\n      this.colYs[i] = Math.max(stampMaxY, this.colYs[i]);\n    }\n  };\n\n  proto._getContainerSize = function () {\n    this.maxY = Math.max.apply(Math, this.colYs);\n    var size = {\n      height: this.maxY\n    };\n\n    if (this._getOption('fitWidth')) {\n      size.width = this._getContainerFitWidth();\n    }\n\n    return size;\n  };\n\n  proto._getContainerFitWidth = function () {\n    var unusedCols = 0; // count unused columns\n\n    var i = this.cols;\n\n    while (--i) {\n      if (this.colYs[i] !== 0) {\n        break;\n      }\n\n      unusedCols++;\n    } // fit container to columns that have been used\n\n\n    return (this.cols - unusedCols) * this.columnWidth - this.gutter;\n  };\n\n  proto.needsResizeLayout = function () {\n    var previousWidth = this.containerWidth;\n    this.getContainerWidth();\n    return previousWidth != this.containerWidth;\n  };\n\n  return Masonry;\n});\n/*!\n * Masonry layout mode\n * sub-classes Masonry\n * https://masonry.desandro.com\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_10__array = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_9__], __WEBPACK_LOCAL_MODULE_10__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_10__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__factory.apply(__WEBPACK_LOCAL_MODULE_10__exports = {}, __WEBPACK_LOCAL_MODULE_10__array)), __WEBPACK_LOCAL_MODULE_10__ === undefined && (__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_10__ = __WEBPACK_LOCAL_MODULE_10__factory)\n\t\t));\n  } else {}\n})(window, function factory(LayoutMode, Masonry) {\n  'use strict'; // -------------------------- masonryDefinition -------------------------- //\n  // create an Outlayer layout class\n\n  var MasonryMode = LayoutMode.create('masonry');\n  var proto = MasonryMode.prototype;\n  var keepModeMethods = {\n    _getElementOffset: true,\n    layout: true,\n    _getMeasurement: true\n  }; // inherit Masonry prototype\n\n  for (var method in Masonry.prototype) {\n    // do not inherit mode methods\n    if (!keepModeMethods[method]) {\n      proto[method] = Masonry.prototype[method];\n    }\n  }\n\n  var measureColumns = proto.measureColumns;\n\n  proto.measureColumns = function () {\n    // set items, used if measuring first item\n    this.items = this.isotope.filteredItems;\n    measureColumns.call(this);\n  }; // point to mode options for fitWidth\n\n\n  var _getOption = proto._getOption;\n\n  proto._getOption = function (option) {\n    if (option == 'fitWidth') {\n      return this.options.isFitWidth !== undefined ? this.options.isFitWidth : this.options.fitWidth;\n    }\n\n    return _getOption.apply(this.isotope, arguments);\n  };\n\n  return MasonryMode;\n});\n/**\n * fitRows layout mode\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_11__array = [__WEBPACK_LOCAL_MODULE_8__], __WEBPACK_LOCAL_MODULE_11__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_11__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__factory.apply(__WEBPACK_LOCAL_MODULE_11__exports = {}, __WEBPACK_LOCAL_MODULE_11__array)), __WEBPACK_LOCAL_MODULE_11__ === undefined && (__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_11__ = __WEBPACK_LOCAL_MODULE_11__factory)\n\t\t));\n  } else {}\n})(window, function factory(LayoutMode) {\n  'use strict';\n\n  var FitRows = LayoutMode.create('fitRows');\n  var proto = FitRows.prototype;\n\n  proto._resetLayout = function () {\n    this.x = 0;\n    this.y = 0;\n    this.maxY = 0;\n\n    this._getMeasurement('gutter', 'outerWidth');\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    var itemWidth = item.size.outerWidth + this.gutter; // if this element cannot fit in the current row\n\n    var containerWidth = this.isotope.size.innerWidth + this.gutter;\n\n    if (this.x !== 0 && itemWidth + this.x > containerWidth) {\n      this.x = 0;\n      this.y = this.maxY;\n    }\n\n    var position = {\n      x: this.x,\n      y: this.y\n    };\n    this.maxY = Math.max(this.maxY, this.y + item.size.outerHeight);\n    this.x += itemWidth;\n    return position;\n  };\n\n  proto._getContainerSize = function () {\n    return {\n      height: this.maxY\n    };\n  };\n\n  return FitRows;\n});\n/**\n * vertical layout mode\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_LOCAL_MODULE_12__array = [__WEBPACK_LOCAL_MODULE_8__], __WEBPACK_LOCAL_MODULE_12__factory = (factory),\n\t\t(typeof __WEBPACK_LOCAL_MODULE_12__factory === 'function' ?\n\t\t\t((__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__factory.apply(__WEBPACK_LOCAL_MODULE_12__exports = {}, __WEBPACK_LOCAL_MODULE_12__array)), __WEBPACK_LOCAL_MODULE_12__ === undefined && (__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__exports)) :\n\t\t\t(__WEBPACK_LOCAL_MODULE_12__ = __WEBPACK_LOCAL_MODULE_12__factory)\n\t\t));\n  } else {}\n})(window, function factory(LayoutMode) {\n  'use strict';\n\n  var Vertical = LayoutMode.create('vertical', {\n    horizontalAlignment: 0\n  });\n  var proto = Vertical.prototype;\n\n  proto._resetLayout = function () {\n    this.y = 0;\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    item.getSize();\n    var x = (this.isotope.size.innerWidth - item.size.outerWidth) * this.options.horizontalAlignment;\n    var y = this.y;\n    this.y += item.size.outerHeight;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  proto._getContainerSize = function () {\n    return {\n      height: this.y\n    };\n  };\n\n  return Vertical;\n});\n/*!\n * Isotope v3.0.6\n *\n * Licensed GPLv3 for open source use\n * or Isotope Commercial License for commercial use\n *\n * https://isotope.metafizzy.co\n * Copyright 2010-2018 Metafizzy\n */\n\n\n(function (window, factory) {\n  // universal module definition\n\n  /* jshint strict: false */\n\n  /*globals define, module, require */\n  if (true) {\n    // AMD\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_4__, __WEBPACK_LOCAL_MODULE_7__, __WEBPACK_LOCAL_MODULE_8__, // include default layout modes\n    __WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_11__, __WEBPACK_LOCAL_MODULE_12__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Outlayer, getSize, matchesSelector, utils, Item, LayoutMode) {\n      return factory(window, Outlayer, getSize, matchesSelector, utils, Item, LayoutMode);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, function factory(window, Outlayer, getSize, matchesSelector, utils, Item, LayoutMode) {\n  // -------------------------- vars -------------------------- //\n  var jQuery = window.jQuery; // -------------------------- helpers -------------------------- //\n\n  var trim = String.prototype.trim ? function (str) {\n    return str.trim();\n  } : function (str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }; // -------------------------- isotopeDefinition -------------------------- //\n  // create an Outlayer layout class\n\n  var Isotope = Outlayer.create('isotope', {\n    layoutMode: 'masonry',\n    isJQueryFiltering: true,\n    sortAscending: true\n  });\n  Isotope.Item = Item;\n  Isotope.LayoutMode = LayoutMode;\n  var proto = Isotope.prototype;\n\n  proto._create = function () {\n    this.itemGUID = 0; // functions that sort items\n\n    this._sorters = {};\n\n    this._getSorters(); // call super\n\n\n    Outlayer.prototype._create.call(this); // create layout modes\n\n\n    this.modes = {}; // start filteredItems with all items\n\n    this.filteredItems = this.items; // keep of track of sortBys\n\n    this.sortHistory = ['original-order']; // create from registered layout modes\n\n    for (var name in LayoutMode.modes) {\n      this._initLayoutMode(name);\n    }\n  };\n\n  proto.reloadItems = function () {\n    // reset item ID counter\n    this.itemGUID = 0; // call super\n\n    Outlayer.prototype.reloadItems.call(this);\n  };\n\n  proto._itemize = function () {\n    var items = Outlayer.prototype._itemize.apply(this, arguments); // assign ID for original-order\n\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      item.id = this.itemGUID++;\n    }\n\n    this._updateItemsSortData(items);\n\n    return items;\n  }; // -------------------------- layout -------------------------- //\n\n\n  proto._initLayoutMode = function (name) {\n    var Mode = LayoutMode.modes[name]; // set mode options\n    // HACK extend initial options, back-fill in default options\n\n    var initialOpts = this.options[name] || {};\n    this.options[name] = Mode.options ? utils.extend(Mode.options, initialOpts) : initialOpts; // init layout mode instance\n\n    this.modes[name] = new Mode(this);\n  };\n\n  proto.layout = function () {\n    // if first time doing layout, do all magic\n    if (!this._isLayoutInited && this._getOption('initLayout')) {\n      this.arrange();\n      return;\n    }\n\n    this._layout();\n  }; // private method to be used in layout() & magic()\n\n\n  proto._layout = function () {\n    // don't animate first layout\n    var isInstant = this._getIsInstant(); // layout flow\n\n\n    this._resetLayout();\n\n    this._manageStamps();\n\n    this.layoutItems(this.filteredItems, isInstant); // flag for initalized\n\n    this._isLayoutInited = true;\n  }; // filter + sort + layout\n\n\n  proto.arrange = function (opts) {\n    // set any options pass\n    this.option(opts);\n\n    this._getIsInstant(); // filter, sort, and layout\n    // filter\n\n\n    var filtered = this._filter(this.items);\n\n    this.filteredItems = filtered.matches;\n\n    this._bindArrangeComplete();\n\n    if (this._isInstant) {\n      this._noTransition(this._hideReveal, [filtered]);\n    } else {\n      this._hideReveal(filtered);\n    }\n\n    this._sort();\n\n    this._layout();\n  }; // alias to _init for main plugin method\n\n\n  proto._init = proto.arrange;\n\n  proto._hideReveal = function (filtered) {\n    this.reveal(filtered.needReveal);\n    this.hide(filtered.needHide);\n  }; // HACK\n  // Don't animate/transition first layout\n  // Or don't animate/transition other layouts\n\n\n  proto._getIsInstant = function () {\n    var isLayoutInstant = this._getOption('layoutInstant');\n\n    var isInstant = isLayoutInstant !== undefined ? isLayoutInstant : !this._isLayoutInited;\n    this._isInstant = isInstant;\n    return isInstant;\n  }; // listen for layoutComplete, hideComplete and revealComplete\n  // to trigger arrangeComplete\n\n\n  proto._bindArrangeComplete = function () {\n    // listen for 3 events to trigger arrangeComplete\n    var isLayoutComplete, isHideComplete, isRevealComplete;\n\n    var _this = this;\n\n    function arrangeParallelCallback() {\n      if (isLayoutComplete && isHideComplete && isRevealComplete) {\n        _this.dispatchEvent('arrangeComplete', null, [_this.filteredItems]);\n      }\n    }\n\n    this.once('layoutComplete', function () {\n      isLayoutComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once('hideComplete', function () {\n      isHideComplete = true;\n      arrangeParallelCallback();\n    });\n    this.once('revealComplete', function () {\n      isRevealComplete = true;\n      arrangeParallelCallback();\n    });\n  }; // -------------------------- filter -------------------------- //\n\n\n  proto._filter = function (items) {\n    var filter = this.options.filter;\n    filter = filter || '*';\n    var matches = [];\n    var hiddenMatched = [];\n    var visibleUnmatched = [];\n\n    var test = this._getFilterTest(filter); // test each item\n\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (item.isIgnored) {\n        continue;\n      } // add item to either matched or unmatched group\n\n\n      var isMatched = test(item); // item.isFilterMatched = isMatched;\n      // add to matches if its a match\n\n      if (isMatched) {\n        matches.push(item);\n      } // add to additional group if item needs to be hidden or revealed\n\n\n      if (isMatched && item.isHidden) {\n        hiddenMatched.push(item);\n      } else if (!isMatched && !item.isHidden) {\n        visibleUnmatched.push(item);\n      }\n    } // return collections of items to be manipulated\n\n\n    return {\n      matches: matches,\n      needReveal: hiddenMatched,\n      needHide: visibleUnmatched\n    };\n  }; // get a jQuery, function, or a matchesSelector test given the filter\n\n\n  proto._getFilterTest = function (filter) {\n    if (jQuery && this.options.isJQueryFiltering) {\n      // use jQuery\n      return function (item) {\n        return jQuery(item.element).is(filter);\n      };\n    }\n\n    if (typeof filter == 'function') {\n      // use filter as function\n      return function (item) {\n        return filter(item.element);\n      };\n    } // default, use filter as selector string\n\n\n    return function (item) {\n      return matchesSelector(item.element, filter);\n    };\n  }; // -------------------------- sorting -------------------------- //\n\n  /**\n   * @params {Array} elems\n   * @public\n   */\n\n\n  proto.updateSortData = function (elems) {\n    // get items\n    var items;\n\n    if (elems) {\n      elems = utils.makeArray(elems);\n      items = this.getItems(elems);\n    } else {\n      // update all items if no elems provided\n      items = this.items;\n    }\n\n    this._getSorters();\n\n    this._updateItemsSortData(items);\n  };\n\n  proto._getSorters = function () {\n    var getSortData = this.options.getSortData;\n\n    for (var key in getSortData) {\n      var sorter = getSortData[key];\n      this._sorters[key] = mungeSorter(sorter);\n    }\n  };\n  /**\n   * @params {Array} items - of Isotope.Items\n   * @private\n   */\n\n\n  proto._updateItemsSortData = function (items) {\n    // do not update if no items\n    var len = items && items.length;\n\n    for (var i = 0; len && i < len; i++) {\n      var item = items[i];\n      item.updateSortData();\n    }\n  }; // ----- munge sorter ----- //\n  // encapsulate this, as we just need mungeSorter\n  // other functions in here are just for munging\n\n\n  var mungeSorter = function () {\n    // add a magic layer to sorters for convienent shorthands\n    // `.foo-bar` will use the text of .foo-bar querySelector\n    // `[foo-bar]` will use attribute\n    // you can also add parser\n    // `.foo-bar parseInt` will parse that as a number\n    function mungeSorter(sorter) {\n      // if not a string, return function or whatever it is\n      if (typeof sorter != 'string') {\n        return sorter;\n      } // parse the sorter string\n\n\n      var args = trim(sorter).split(' ');\n      var query = args[0]; // check if query looks like [an-attribute]\n\n      var attrMatch = query.match(/^\\[(.+)\\]$/);\n      var attr = attrMatch && attrMatch[1];\n      var getValue = getValueGetter(attr, query); // use second argument as a parser\n\n      var parser = Isotope.sortDataParsers[args[1]]; // parse the value, if there was a parser\n\n      sorter = parser ? function (elem) {\n        return elem && parser(getValue(elem));\n      } : // otherwise just return value\n      function (elem) {\n        return elem && getValue(elem);\n      };\n      return sorter;\n    } // get an attribute getter, or get text of the querySelector\n\n\n    function getValueGetter(attr, query) {\n      // if query looks like [foo-bar], get attribute\n      if (attr) {\n        return function getAttribute(elem) {\n          return elem.getAttribute(attr);\n        };\n      } // otherwise, assume its a querySelector, and get its text\n\n\n      return function getChildText(elem) {\n        var child = elem.querySelector(query);\n        return child && child.textContent;\n      };\n    }\n\n    return mungeSorter;\n  }(); // parsers used in getSortData shortcut strings\n\n\n  Isotope.sortDataParsers = {\n    'parseInt': function (_parseInt) {\n      function parseInt(_x) {\n        return _parseInt.apply(this, arguments);\n      }\n\n      parseInt.toString = function () {\n        return _parseInt.toString();\n      };\n\n      return parseInt;\n    }(function (val) {\n      return parseInt(val, 10);\n    }),\n    'parseFloat': function (_parseFloat) {\n      function parseFloat(_x2) {\n        return _parseFloat.apply(this, arguments);\n      }\n\n      parseFloat.toString = function () {\n        return _parseFloat.toString();\n      };\n\n      return parseFloat;\n    }(function (val) {\n      return parseFloat(val);\n    })\n  }; // ----- sort method ----- //\n  // sort filteredItem order\n\n  proto._sort = function () {\n    if (!this.options.sortBy) {\n      return;\n    } // keep track of sortBy History\n\n\n    var sortBys = utils.makeArray(this.options.sortBy);\n\n    if (!this._getIsSameSortBy(sortBys)) {\n      // concat all sortBy and sortHistory, add to front, oldest goes in last\n      this.sortHistory = sortBys.concat(this.sortHistory);\n    } // sort magic\n\n\n    var itemSorter = getItemSorter(this.sortHistory, this.options.sortAscending);\n    this.filteredItems.sort(itemSorter);\n  }; // check if sortBys is same as start of sortHistory\n\n\n  proto._getIsSameSortBy = function (sortBys) {\n    for (var i = 0; i < sortBys.length; i++) {\n      if (sortBys[i] != this.sortHistory[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // returns a function used for sorting\n\n\n  function getItemSorter(sortBys, sortAsc) {\n    return function sorter(itemA, itemB) {\n      // cycle through all sortKeys\n      for (var i = 0; i < sortBys.length; i++) {\n        var sortBy = sortBys[i];\n        var a = itemA.sortData[sortBy];\n        var b = itemB.sortData[sortBy];\n\n        if (a > b || a < b) {\n          // if sortAsc is an object, use the value given the sortBy key\n          var isAscending = sortAsc[sortBy] !== undefined ? sortAsc[sortBy] : sortAsc;\n          var direction = isAscending ? 1 : -1;\n          return (a > b ? 1 : -1) * direction;\n        }\n      }\n\n      return 0;\n    };\n  } // -------------------------- methods -------------------------- //\n  // get layout mode\n\n\n  proto._mode = function () {\n    var layoutMode = this.options.layoutMode;\n    var mode = this.modes[layoutMode];\n\n    if (!mode) {\n      // TODO console.error\n      throw new Error('No layout mode: ' + layoutMode);\n    } // HACK sync mode's options\n    // any options set after init for layout mode need to be synced\n\n\n    mode.options = this.options[layoutMode];\n    return mode;\n  };\n\n  proto._resetLayout = function () {\n    // trigger original reset layout\n    Outlayer.prototype._resetLayout.call(this);\n\n    this._mode()._resetLayout();\n  };\n\n  proto._getItemLayoutPosition = function (item) {\n    return this._mode()._getItemLayoutPosition(item);\n  };\n\n  proto._manageStamp = function (stamp) {\n    this._mode()._manageStamp(stamp);\n  };\n\n  proto._getContainerSize = function () {\n    return this._mode()._getContainerSize();\n  };\n\n  proto.needsResizeLayout = function () {\n    return this._mode().needsResizeLayout();\n  }; // -------------------------- adding & removing -------------------------- //\n  // HEADS UP overwrites default Outlayer appended\n\n\n  proto.appended = function (elems) {\n    var items = this.addItems(elems);\n\n    if (!items.length) {\n      return;\n    } // filter, layout, reveal new items\n\n\n    var filteredItems = this._filterRevealAdded(items); // add to filteredItems\n\n\n    this.filteredItems = this.filteredItems.concat(filteredItems);\n  }; // HEADS UP overwrites default Outlayer prepended\n\n\n  proto.prepended = function (elems) {\n    var items = this._itemize(elems);\n\n    if (!items.length) {\n      return;\n    } // start new layout\n\n\n    this._resetLayout();\n\n    this._manageStamps(); // filter, layout, reveal new items\n\n\n    var filteredItems = this._filterRevealAdded(items); // layout previous items\n\n\n    this.layoutItems(this.filteredItems); // add to items and filteredItems\n\n    this.filteredItems = filteredItems.concat(this.filteredItems);\n    this.items = items.concat(this.items);\n  };\n\n  proto._filterRevealAdded = function (items) {\n    var filtered = this._filter(items);\n\n    this.hide(filtered.needHide); // reveal all new items\n\n    this.reveal(filtered.matches); // layout new items, no transition\n\n    this.layoutItems(filtered.matches, true);\n    return filtered.matches;\n  };\n  /**\n   * Filter, sort, and layout newly-appended item elements\n   * @param {Array or NodeList or Element} elems\n   */\n\n\n  proto.insert = function (elems) {\n    var items = this.addItems(elems);\n\n    if (!items.length) {\n      return;\n    } // append item elements\n\n\n    var i, item;\n    var len = items.length;\n\n    for (i = 0; i < len; i++) {\n      item = items[i];\n      this.element.appendChild(item.element);\n    } // filter new stuff\n\n\n    var filteredInsertItems = this._filter(items).matches; // set flag\n\n\n    for (i = 0; i < len; i++) {\n      items[i].isLayoutInstant = true;\n    }\n\n    this.arrange(); // reset flag\n\n    for (i = 0; i < len; i++) {\n      delete items[i].isLayoutInstant;\n    }\n\n    this.reveal(filteredInsertItems);\n  };\n\n  var _remove = proto.remove;\n\n  proto.remove = function (elems) {\n    elems = utils.makeArray(elems);\n    var removeItems = this.getItems(elems); // do regular thing\n\n    _remove.call(this, elems); // bail if no items to remove\n\n\n    var len = removeItems && removeItems.length; // remove elems from filteredItems\n\n    for (var i = 0; len && i < len; i++) {\n      var item = removeItems[i]; // remove item from collection\n\n      utils.removeFrom(this.filteredItems, item);\n    }\n  };\n\n  proto.shuffle = function () {\n    // update random sortData\n    for (var i = 0; i < this.items.length; i++) {\n      var item = this.items[i];\n      item.sortData.random = Math.random();\n    }\n\n    this.options.sortBy = 'random';\n\n    this._sort();\n\n    this._layout();\n  };\n  /**\n   * trigger fn without transition\n   * kind of hacky to have this in the first place\n   * @param {Function} fn\n   * @param {Array} args\n   * @returns ret\n   * @private\n   */\n\n\n  proto._noTransition = function (fn, args) {\n    // save transitionDuration before disabling\n    var transitionDuration = this.options.transitionDuration; // disable transition\n\n    this.options.transitionDuration = 0; // do it\n\n    var returnValue = fn.apply(this, args); // re-enable transition for reveal\n\n    this.options.transitionDuration = transitionDuration;\n    return returnValue;\n  }; // ----- helper methods ----- //\n\n  /**\n   * getter method for getting filtered item elements\n   * @returns {Array} elems - collection of item elements\n   */\n\n\n  proto.getFilteredItemElements = function () {\n    return this.filteredItems.map(function (item) {\n      return item.element;\n    });\n  }; // -----  ----- //\n\n\n  return Isotope;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/isotope.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/js/vendor"], () => (__webpack_exec__("./resources/assets/js/isotope.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);